/* soapStub.h
   Generated by gSOAP 2.7.13 from WSHeader.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_wsu__tTimestampFault
#define SOAP_TYPE_wsu__tTimestampFault (8)
/* wsu:tTimestampFault */
enum wsu__tTimestampFault {wsu__MessageExpired = 0};
#endif
typedef enum wsu__tTimestampFault wsu__tTimestampFault;

#ifndef SOAP_TYPE_xsd__boolean_
#define SOAP_TYPE_xsd__boolean_ (10)
/* xsd:boolean */
enum xsd__boolean_ {_false = 0, _true = 1};
#endif

#ifndef SOAP_TYPE_wsse__FaultcodeEnum
#define SOAP_TYPE_wsse__FaultcodeEnum (68)
/* wsse:FaultcodeEnum */
enum wsse__FaultcodeEnum {wsse__FaultcodeEnum__wsse__UnsupportedSecurityToken = 0, wsse__FaultcodeEnum__wsse__UnsupportedAlgorithm = 1, wsse__FaultcodeEnum__wsse__InvalidSecurity = 2, wsse__FaultcodeEnum__wsse__InvalidSecurityToken = 3, wsse__FaultcodeEnum__wsse__FailedAuthentication = 4, wsse__FaultcodeEnum__wsse__FailedCheck = 5, wsse__FaultcodeEnum__wsse__SecurityTokenUnavailable = 6};
#endif
typedef enum wsse__FaultcodeEnum wsse__FaultcodeEnum;

#ifndef SOAP_TYPE_ns1__JobStatus
#define SOAP_TYPE_ns1__JobStatus (69)
/* ns1:JobStatus */
enum ns1__JobStatus {ns1__JobStatus__NotStarted = 0, ns1__JobStatus__Initializing = 1, ns1__JobStatus__Running = 2, ns1__JobStatus__Paused = 3, ns1__JobStatus__Waiting = 4, ns1__JobStatus__Completed = 5, ns1__JobStatus__Aborted = 6, ns1__JobStatus__StartPending = 7, ns1__JobStatus__StopPending = 8, ns1__JobStatus__PausePending = 9, ns1__JobStatus__ResumePending = 10};
#endif
typedef enum ns1__JobStatus ns1__JobStatus;

#ifndef SOAP_TYPE_ns3__TaskStatus
#define SOAP_TYPE_ns3__TaskStatus (71)
/* ns3:TaskStatus */
enum ns3__TaskStatus {ns3__TaskStatus__Initializing = 0, ns3__TaskStatus__StartPending = 1, ns3__TaskStatus__Running = 2, ns3__TaskStatus__StopPending = 3, ns3__TaskStatus__Completed = 4, ns3__TaskStatus__Aborted = 5, ns3__TaskStatus__Skipped = 6, ns3__TaskStatus__NotResponding = 7};
#endif
typedef enum ns3__TaskStatus ns3__TaskStatus;

#ifndef SOAP_TYPE_ns3__MachineStatus
#define SOAP_TYPE_ns3__MachineStatus (72)
/* ns3:MachineStatus */
enum ns3__MachineStatus {ns3__MachineStatus__Online = 0, ns3__MachineStatus__Offline = 1, ns3__MachineStatus__Faulty = 2, ns3__MachineStatus__NotResponding = 3};
#endif
typedef enum ns3__MachineStatus ns3__MachineStatus;

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE__wsu__Timestamp
#define SOAP_TYPE__wsu__Timestamp (9)
/* wsu:Timestamp */
struct _wsu__Timestamp
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Created;	/* optional element of type xsd:string */
	char *Expires;	/* optional element of type xsd:string */
};
#endif
typedef struct _wsu__Timestamp _wsu__Timestamp;

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE__wsp__union_OperatorContentType
#define SOAP_TYPE__wsp__union_OperatorContentType (77)
/* xsd:choice */
union _wsp__union_OperatorContentType
{
#define SOAP_UNION__wsp__union_OperatorContentType_wsp__Policy	(1)
	class _wsp__Policy *wsp__Policy;
#define SOAP_UNION__wsp__union_OperatorContentType_wsp__All	(2)
	class wsp__OperatorContentType *wsp__All;
#define SOAP_UNION__wsp__union_OperatorContentType_wsp__ExactlyOne	(3)
	wsp__OperatorContentType *wsp__ExactlyOne;
#define SOAP_UNION__wsp__union_OperatorContentType_wsp__PolicyReference	(4)
	class _wsp__PolicyReference *wsp__PolicyReference;
#define SOAP_UNION__wsp__union_OperatorContentType___any	(5)
	char *__any;
};
#endif

#ifndef SOAP_TYPE___wsp__union_OperatorContentType
#define SOAP_TYPE___wsp__union_OperatorContentType (73)
/* Operation wrapper: */
class SOAP_CMAC __wsp__union_OperatorContentType
{
public:
	int __union_OperatorContentType;	/* union discriminant (of union defined below) */
	union _wsp__union_OperatorContentType union_OperatorContentType;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE___wsp__union_OperatorContentType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __wsp__union_OperatorContentType() : __union_OperatorContentType(0) { }
	virtual ~__wsp__union_OperatorContentType() { }
};
#endif

#ifndef SOAP_TYPE_wsp__OperatorContentType
#define SOAP_TYPE_wsp__OperatorContentType (11)
/* wsp:OperatorContentType */
class SOAP_CMAC wsp__OperatorContentType
{
public:
	int __size_OperatorContentType;	/* sequence of elements <-union-OperatorContentType> */
	__wsp__union_OperatorContentType *__union_OperatorContentType;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_wsp__OperatorContentType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsp__OperatorContentType() : __size_OperatorContentType(0), __union_OperatorContentType(NULL), soap(NULL) { }
	virtual ~wsp__OperatorContentType() { }
};
#endif

#ifndef SOAP_TYPE__wsp__PolicyReference
#define SOAP_TYPE__wsp__PolicyReference (13)
/* wsp:PolicyReference */
class SOAP_CMAC _wsp__PolicyReference
{
public:
	char *URI;	/* optional attribute */
	char *Digest;	/* optional attribute */
	char *DigestAlgorithm;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__wsp__PolicyReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsp__PolicyReference() : URI(NULL), Digest(NULL), DigestAlgorithm(NULL), __anyAttribute(NULL), soap(NULL) { }
	virtual ~_wsp__PolicyReference() { }
};
#endif

#ifndef SOAP_TYPE__wsp__UsingPolicy
#define SOAP_TYPE__wsp__UsingPolicy (14)
/* wsp:UsingPolicy */
class SOAP_CMAC _wsp__UsingPolicy
{
public:
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__wsp__UsingPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsp__UsingPolicy() : __anyAttribute(NULL), soap(NULL) { }
	virtual ~_wsp__UsingPolicy() { }
};
#endif

#ifndef SOAP_TYPE__wsp__union_PolicyAttachment
#define SOAP_TYPE__wsp__union_PolicyAttachment (82)
/* xsd:choice */
union _wsp__union_PolicyAttachment
{
#define SOAP_UNION__wsp__union_PolicyAttachment_wsp__Policy	(1)
	_wsp__Policy *wsp__Policy;
#define SOAP_UNION__wsp__union_PolicyAttachment_wsp__PolicyReference	(2)
	_wsp__PolicyReference *wsp__PolicyReference;
};
#endif

#ifndef SOAP_TYPE___wsp__union_PolicyAttachment
#define SOAP_TYPE___wsp__union_PolicyAttachment (81)
/* Operation wrapper: */
class SOAP_CMAC __wsp__union_PolicyAttachment
{
public:
	int __union_PolicyAttachment;	/* union discriminant (of union defined below) */
	union _wsp__union_PolicyAttachment union_PolicyAttachment;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE___wsp__union_PolicyAttachment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __wsp__union_PolicyAttachment() : __union_PolicyAttachment(0) { }
	virtual ~__wsp__union_PolicyAttachment() { }
};
#endif

#ifndef SOAP_TYPE__wsp__PolicyAttachment
#define SOAP_TYPE__wsp__PolicyAttachment (15)
/* wsp:PolicyAttachment */
class SOAP_CMAC _wsp__PolicyAttachment
{
public:
	class _wsp__AppliesTo *wsp__AppliesTo;	/* required element of type wsp:AppliesTo */
	int __size_PolicyAttachment;	/* sequence of elements <-union-PolicyAttachment> */
	__wsp__union_PolicyAttachment *__union_PolicyAttachment;
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__wsp__PolicyAttachment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsp__PolicyAttachment() : wsp__AppliesTo(NULL), __size_PolicyAttachment(0), __union_PolicyAttachment(NULL), __anyAttribute(NULL), soap(NULL) { }
	virtual ~_wsp__PolicyAttachment() { }
};
#endif

#ifndef SOAP_TYPE__wsp__AppliesTo
#define SOAP_TYPE__wsp__AppliesTo (16)
/* wsp:AppliesTo */
class SOAP_CMAC _wsp__AppliesTo
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__wsp__AppliesTo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsp__AppliesTo() : __anyAttribute(NULL), soap(NULL) { }
	virtual ~_wsp__AppliesTo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfString
#define SOAP_TYPE_ns1__ArrayOfString (17)
/* ns1:ArrayOfString */
class SOAP_CMAC ns1__ArrayOfString
{
public:
	std::vector<std::string >string;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns1__ArrayOfString */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfString() : soap(NULL) { }
	virtual ~ns1__ArrayOfString() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfJobDetailsOut
#define SOAP_TYPE_ns1__ArrayOfJobDetailsOut (18)
/* ns1:ArrayOfJobDetailsOut */
class SOAP_CMAC ns1__ArrayOfJobDetailsOut
{
public:
	std::vector<class ns1__JobDetailsOut * >JobDetailsOut;	/* optional element of type ns1:JobDetailsOut */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns1__ArrayOfJobDetailsOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfJobDetailsOut() : soap(NULL) { }
	virtual ~ns1__ArrayOfJobDetailsOut() { }
};
#endif

#ifndef SOAP_TYPE_ns1__JobDetailsOut
#define SOAP_TYPE_ns1__JobDetailsOut (19)
/* ns1:JobDetailsOut */
class SOAP_CMAC ns1__JobDetailsOut
{
public:
	std::string JobId;	/* required element of type ns2:guid */
	std::string *JobName;	/* optional element of type xsd:string */
	enum ns1__JobStatus JobStatus;	/* required element of type ns1:JobStatus */
	std::string *NodeName;	/* optional element of type xsd:string */
	LONG64 StartTime;	/* required element of type xsd:long */
	LONG64 StopTime;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns1__JobDetailsOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__JobDetailsOut() : JobName(NULL), JobStatus((enum ns1__JobStatus)0), NodeName(NULL), StartTime(0), StopTime(0), soap(NULL) { }
	virtual ~ns1__JobDetailsOut() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfWorkflowDetailsModel
#define SOAP_TYPE_ns1__ArrayOfWorkflowDetailsModel (20)
/* ns1:ArrayOfWorkflowDetailsModel */
class SOAP_CMAC ns1__ArrayOfWorkflowDetailsModel
{
public:
	std::vector<class ns1__WorkflowDetailsModel * >WorkflowDetailsModel;	/* optional element of type ns1:WorkflowDetailsModel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns1__ArrayOfWorkflowDetailsModel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfWorkflowDetailsModel() : soap(NULL) { }
	virtual ~ns1__ArrayOfWorkflowDetailsModel() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WorkflowDetailsModel
#define SOAP_TYPE_ns1__WorkflowDetailsModel (21)
/* ns1:WorkflowDetailsModel */
class SOAP_CMAC ns1__WorkflowDetailsModel
{
public:
	std::string WorkflowId;	/* required element of type ns2:guid */
	std::string *WorkflowName;	/* optional element of type xsd:string */
	std::string *WorkflowLabel;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns1__WorkflowDetailsModel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WorkflowDetailsModel() : WorkflowName(NULL), WorkflowLabel(NULL), soap(NULL) { }
	virtual ~ns1__WorkflowDetailsModel() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOutputModel
#define SOAP_TYPE_ns1__ArrayOfOutputModel (22)
/* ns1:ArrayOfOutputModel */
class SOAP_CMAC ns1__ArrayOfOutputModel
{
public:
	std::vector<class ns1__OutputModel * >OutputModel;	/* optional element of type ns1:OutputModel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns1__ArrayOfOutputModel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfOutputModel() : soap(NULL) { }
	virtual ~ns1__ArrayOfOutputModel() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OutputModel
#define SOAP_TYPE_ns1__OutputModel (23)
/* ns1:OutputModel */
class SOAP_CMAC ns1__OutputModel
{
public:
	std::string DataProductId;	/* required element of type ns2:guid */
	std::string *DataProductName;	/* optional element of type xsd:string */
	std::string *MimeType;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns1__OutputModel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OutputModel() : DataProductName(NULL), MimeType(NULL), soap(NULL) { }
	virtual ~ns1__OutputModel() { }
};
#endif

#ifndef SOAP_TYPE__ns1__Authenticate
#define SOAP_TYPE__ns1__Authenticate (24)
/* ns1:Authenticate */
class SOAP_CMAC _ns1__Authenticate
{
public:
	std::string *userName;	/* optional element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__ns1__Authenticate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Authenticate() : userName(NULL), password(NULL), soap(NULL) { }
	virtual ~_ns1__Authenticate() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AuthenticateResponse
#define SOAP_TYPE__ns1__AuthenticateResponse (25)
/* ns1:AuthenticateResponse */
class SOAP_CMAC _ns1__AuthenticateResponse
{
public:
	std::string *AuthenticateResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns1__AuthenticateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AuthenticateResponse() : AuthenticateResult(NULL), soap(NULL) { }
	virtual ~_ns1__AuthenticateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__TerminateJob
#define SOAP_TYPE__ns1__TerminateJob (26)
/* ns1:TerminateJob */
class SOAP_CMAC _ns1__TerminateJob
{
public:
	std::string jobId;	/* required element of type ns2:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns1__TerminateJob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__TerminateJob() : soap(NULL) { }
	virtual ~_ns1__TerminateJob() { }
};
#endif

#ifndef SOAP_TYPE__ns1__TerminateJobResponse
#define SOAP_TYPE__ns1__TerminateJobResponse (27)
/* ns1:TerminateJobResponse */
class SOAP_CMAC _ns1__TerminateJobResponse
{
public:
	enum xsd__boolean_ TerminateJobResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__ns1__TerminateJobResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__TerminateJobResponse() : TerminateJobResult((enum xsd__boolean_)0), soap(NULL) { }
	virtual ~_ns1__TerminateJobResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetMachineList
#define SOAP_TYPE__ns1__GetMachineList (28)
/* ns1:GetMachineList */
class SOAP_CMAC _ns1__GetMachineList
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__ns1__GetMachineList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetMachineList() : soap(NULL) { }
	virtual ~_ns1__GetMachineList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetMachineListResponse
#define SOAP_TYPE__ns1__GetMachineListResponse (29)
/* ns1:GetMachineListResponse */
class SOAP_CMAC _ns1__GetMachineListResponse
{
public:
	ns1__ArrayOfString *GetMachineListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE__ns1__GetMachineListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetMachineListResponse() : GetMachineListResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetMachineListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetJobList
#define SOAP_TYPE__ns1__GetJobList (30)
/* ns1:GetJobList */
class SOAP_CMAC _ns1__GetJobList
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE__ns1__GetJobList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetJobList() : soap(NULL) { }
	virtual ~_ns1__GetJobList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetJobListResponse
#define SOAP_TYPE__ns1__GetJobListResponse (31)
/* ns1:GetJobListResponse */
class SOAP_CMAC _ns1__GetJobListResponse
{
public:
	ns1__ArrayOfJobDetailsOut *GetJobListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfJobDetailsOut */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE__ns1__GetJobListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetJobListResponse() : GetJobListResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetJobListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetJobStatus
#define SOAP_TYPE__ns1__GetJobStatus (32)
/* ns1:GetJobStatus */
class SOAP_CMAC _ns1__GetJobStatus
{
public:
	std::string jobId;	/* required element of type ns2:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE__ns1__GetJobStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetJobStatus() : soap(NULL) { }
	virtual ~_ns1__GetJobStatus() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetJobStatusResponse
#define SOAP_TYPE__ns1__GetJobStatusResponse (33)
/* ns1:GetJobStatusResponse */
class SOAP_CMAC _ns1__GetJobStatusResponse
{
public:
	ns1__JobDetailsOut *GetJobStatusResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:JobDetailsOut */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE__ns1__GetJobStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetJobStatusResponse() : GetJobStatusResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetJobStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetWorkflowList
#define SOAP_TYPE__ns1__GetWorkflowList (34)
/* ns1:GetWorkflowList */
class SOAP_CMAC _ns1__GetWorkflowList
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE__ns1__GetWorkflowList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetWorkflowList() : soap(NULL) { }
	virtual ~_ns1__GetWorkflowList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetWorkflowListResponse
#define SOAP_TYPE__ns1__GetWorkflowListResponse (35)
/* ns1:GetWorkflowListResponse */
class SOAP_CMAC _ns1__GetWorkflowListResponse
{
public:
	ns1__ArrayOfWorkflowDetailsModel *GetWorkflowListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfWorkflowDetailsModel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE__ns1__GetWorkflowListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetWorkflowListResponse() : GetWorkflowListResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetWorkflowListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RunWorkflow
#define SOAP_TYPE__ns1__RunWorkflow (36)
/* ns1:RunWorkflow */
class SOAP_CMAC _ns1__RunWorkflow
{
public:
	std::string wfId;	/* required element of type ns2:guid */
	std::string *nodeName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE__ns1__RunWorkflow */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RunWorkflow() : nodeName(NULL), soap(NULL) { }
	virtual ~_ns1__RunWorkflow() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RunWorkflowResponse
#define SOAP_TYPE__ns1__RunWorkflowResponse (37)
/* ns1:RunWorkflowResponse */
class SOAP_CMAC _ns1__RunWorkflowResponse
{
public:
	std::string RunWorkflowResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE__ns1__RunWorkflowResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RunWorkflowResponse() : soap(NULL) { }
	virtual ~_ns1__RunWorkflowResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetWorkflowOuputList
#define SOAP_TYPE__ns1__GetWorkflowOuputList (38)
/* ns1:GetWorkflowOuputList */
class SOAP_CMAC _ns1__GetWorkflowOuputList
{
public:
	std::string jobId;	/* required element of type ns2:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE__ns1__GetWorkflowOuputList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetWorkflowOuputList() : soap(NULL) { }
	virtual ~_ns1__GetWorkflowOuputList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetWorkflowOuputListResponse
#define SOAP_TYPE__ns1__GetWorkflowOuputListResponse (39)
/* ns1:GetWorkflowOuputListResponse */
class SOAP_CMAC _ns1__GetWorkflowOuputListResponse
{
public:
	ns1__ArrayOfOutputModel *GetWorkflowOuputListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfOutputModel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE__ns1__GetWorkflowOuputListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetWorkflowOuputListResponse() : GetWorkflowOuputListResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetWorkflowOuputListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetDataProductList
#define SOAP_TYPE__ns1__GetDataProductList (40)
/* ns1:GetDataProductList */
class SOAP_CMAC _ns1__GetDataProductList
{
public:
	std::string jobId;	/* required element of type ns2:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE__ns1__GetDataProductList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetDataProductList() : soap(NULL) { }
	virtual ~_ns1__GetDataProductList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetDataProductListResponse
#define SOAP_TYPE__ns1__GetDataProductListResponse (41)
/* ns1:GetDataProductListResponse */
class SOAP_CMAC _ns1__GetDataProductListResponse
{
public:
	ns1__ArrayOfOutputModel *GetDataProductListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfOutputModel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE__ns1__GetDataProductListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetDataProductListResponse() : GetDataProductListResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetDataProductListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetDataProduct
#define SOAP_TYPE__ns1__GetDataProduct (42)
/* ns1:GetDataProduct */
class SOAP_CMAC _ns1__GetDataProduct
{
public:
	std::string dataProductId;	/* required element of type ns2:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE__ns1__GetDataProduct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetDataProduct() : soap(NULL) { }
	virtual ~_ns1__GetDataProduct() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetDataProductResponse
#define SOAP_TYPE__ns1__GetDataProductResponse (43)
/* ns1:GetDataProductResponse */
class SOAP_CMAC _ns1__GetDataProductResponse
{
public:
	char *GetDataProductResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE__ns1__GetDataProductResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetDataProductResponse() : GetDataProductResult(NULL), soap(NULL) { }
	virtual ~_ns1__GetDataProductResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfTaskInfo
#define SOAP_TYPE_ns3__ArrayOfTaskInfo (44)
/* ns3:ArrayOfTaskInfo */
class SOAP_CMAC ns3__ArrayOfTaskInfo
{
public:
	std::vector<class ns3__TaskInfo * >TaskInfo;	/* optional element of type ns3:TaskInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_ns3__ArrayOfTaskInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfTaskInfo() : soap(NULL) { }
	virtual ~ns3__ArrayOfTaskInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__TaskInfo
#define SOAP_TYPE_ns3__TaskInfo (45)
/* ns3:TaskInfo */
class SOAP_CMAC ns3__TaskInfo
{
public:
	std::string ID;	/* required element of type ns2:guid */
	std::string *Name;	/* optional element of type xsd:string */
	enum ns3__TaskStatus Status;	/* required element of type ns3:TaskStatus */
	time_t StartTime;	/* required element of type xsd:dateTime */
	time_t StopTime;	/* required element of type xsd:dateTime */
	time_t CreateTime;	/* required element of type xsd:dateTime */
	std::string *Machine;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_ns3__TaskInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TaskInfo() : Name(NULL), Status((enum ns3__TaskStatus)0), StartTime(0), StopTime(0), CreateTime(0), Machine(NULL), soap(NULL) { }
	virtual ~ns3__TaskInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfResultInfo
#define SOAP_TYPE_ns3__ArrayOfResultInfo (46)
/* ns3:ArrayOfResultInfo */
class SOAP_CMAC ns3__ArrayOfResultInfo
{
public:
	std::vector<class ns3__ResultInfo * >ResultInfo;	/* optional element of type ns3:ResultInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ns3__ArrayOfResultInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfResultInfo() : soap(NULL) { }
	virtual ~ns3__ArrayOfResultInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ResultInfo
#define SOAP_TYPE_ns3__ResultInfo (47)
/* ns3:ResultInfo */
class SOAP_CMAC ns3__ResultInfo
{
public:
	std::string ID;	/* required element of type ns2:guid */
	std::string *Name;	/* optional element of type xsd:string */
	std::string *Type;	/* optional element of type xsd:string */
	std::string *MimeType;	/* optional element of type xsd:string */
	std::string *Value;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_ns3__ResultInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ResultInfo() : Name(NULL), Type(NULL), MimeType(NULL), Value(NULL), soap(NULL) { }
	virtual ~ns3__ResultInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfComputationType
#define SOAP_TYPE_ns3__ArrayOfComputationType (48)
/* ns3:ArrayOfComputationType */
class SOAP_CMAC ns3__ArrayOfComputationType
{
public:
	std::vector<class ns3__ComputationType * >ComputationType;	/* optional element of type ns3:ComputationType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ns3__ArrayOfComputationType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfComputationType() : soap(NULL) { }
	virtual ~ns3__ArrayOfComputationType() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ComputationType
#define SOAP_TYPE_ns3__ComputationType (49)
/* ns3:ComputationType */
class SOAP_CMAC ns3__ComputationType
{
public:
	std::string ID;	/* required element of type ns2:guid */
	std::string *Name;	/* optional element of type xsd:string */
	std::string *TaskTemplateName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ns3__ComputationType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ComputationType() : Name(NULL), TaskTemplateName(NULL), soap(NULL) { }
	virtual ~ns3__ComputationType() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfMachineInfo
#define SOAP_TYPE_ns3__ArrayOfMachineInfo (50)
/* ns3:ArrayOfMachineInfo */
class SOAP_CMAC ns3__ArrayOfMachineInfo
{
public:
	std::vector<class ns3__MachineInfo * >MachineInfo;	/* optional element of type ns3:MachineInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_ns3__ArrayOfMachineInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfMachineInfo() : soap(NULL) { }
	virtual ~ns3__ArrayOfMachineInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__MachineInfo
#define SOAP_TYPE_ns3__MachineInfo (51)
/* ns3:MachineInfo */
class SOAP_CMAC ns3__MachineInfo
{
public:
	std::string ID;	/* required element of type ns2:guid */
	std::string *Name;	/* optional element of type xsd:string */
	enum ns3__MachineStatus Status;	/* required element of type ns3:MachineStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ns3__MachineInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__MachineInfo() : Name(NULL), Status((enum ns3__MachineStatus)0), soap(NULL) { }
	virtual ~ns3__MachineInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns3__Ping
#define SOAP_TYPE__ns3__Ping (52)
/* ns3:Ping */
class SOAP_CMAC _ns3__Ping
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE__ns3__Ping */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__Ping() : soap(NULL) { }
	virtual ~_ns3__Ping() { }
};
#endif

#ifndef SOAP_TYPE__ns3__PingResponse
#define SOAP_TYPE__ns3__PingResponse (53)
/* ns3:PingResponse */
class SOAP_CMAC _ns3__PingResponse
{
public:
	enum xsd__boolean_ PingResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE__ns3__PingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__PingResponse() : PingResult((enum xsd__boolean_)0), soap(NULL) { }
	virtual ~_ns3__PingResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__TaskList
#define SOAP_TYPE__ns3__TaskList (54)
/* ns3:TaskList */
class SOAP_CMAC _ns3__TaskList
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE__ns3__TaskList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__TaskList() : soap(NULL) { }
	virtual ~_ns3__TaskList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__TaskListResponse
#define SOAP_TYPE__ns3__TaskListResponse (55)
/* ns3:TaskListResponse */
class SOAP_CMAC _ns3__TaskListResponse
{
public:
	ns3__ArrayOfTaskInfo *TaskListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfTaskInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE__ns3__TaskListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__TaskListResponse() : TaskListResult(NULL), soap(NULL) { }
	virtual ~_ns3__TaskListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__TaskInfo
#define SOAP_TYPE__ns3__TaskInfo (56)
/* ns3:TaskInfo */
class SOAP_CMAC _ns3__TaskInfo
{
public:
	std::string id;	/* required element of type ns2:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE__ns3__TaskInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__TaskInfo() : soap(NULL) { }
	virtual ~_ns3__TaskInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns3__TaskInfoResponse
#define SOAP_TYPE__ns3__TaskInfoResponse (57)
/* ns3:TaskInfoResponse */
class SOAP_CMAC _ns3__TaskInfoResponse
{
public:
	ns3__TaskInfo *TaskInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:TaskInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE__ns3__TaskInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__TaskInfoResponse() : TaskInfoResult(NULL), soap(NULL) { }
	virtual ~_ns3__TaskInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__ResultTask
#define SOAP_TYPE__ns3__ResultTask (58)
/* ns3:ResultTask */
class SOAP_CMAC _ns3__ResultTask
{
public:
	std::string id;	/* required element of type ns2:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE__ns3__ResultTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ResultTask() : soap(NULL) { }
	virtual ~_ns3__ResultTask() { }
};
#endif

#ifndef SOAP_TYPE__ns3__ResultTaskResponse
#define SOAP_TYPE__ns3__ResultTaskResponse (59)
/* ns3:ResultTaskResponse */
class SOAP_CMAC _ns3__ResultTaskResponse
{
public:
	ns3__ArrayOfResultInfo *ResultTaskResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfResultInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE__ns3__ResultTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ResultTaskResponse() : ResultTaskResult(NULL), soap(NULL) { }
	virtual ~_ns3__ResultTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__ComputationTypeList
#define SOAP_TYPE__ns3__ComputationTypeList (60)
/* ns3:ComputationTypeList */
class SOAP_CMAC _ns3__ComputationTypeList
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE__ns3__ComputationTypeList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ComputationTypeList() : soap(NULL) { }
	virtual ~_ns3__ComputationTypeList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__ComputationTypeListResponse
#define SOAP_TYPE__ns3__ComputationTypeListResponse (61)
/* ns3:ComputationTypeListResponse */
class SOAP_CMAC _ns3__ComputationTypeListResponse
{
public:
	ns3__ArrayOfComputationType *ComputationTypeListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfComputationType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE__ns3__ComputationTypeListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ComputationTypeListResponse() : ComputationTypeListResult(NULL), soap(NULL) { }
	virtual ~_ns3__ComputationTypeListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__MachineList
#define SOAP_TYPE__ns3__MachineList (62)
/* ns3:MachineList */
class SOAP_CMAC _ns3__MachineList
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE__ns3__MachineList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__MachineList() : soap(NULL) { }
	virtual ~_ns3__MachineList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__MachineListResponse
#define SOAP_TYPE__ns3__MachineListResponse (63)
/* ns3:MachineListResponse */
class SOAP_CMAC _ns3__MachineListResponse
{
public:
	ns3__ArrayOfMachineInfo *MachineListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfMachineInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE__ns3__MachineListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__MachineListResponse() : MachineListResult(NULL), soap(NULL) { }
	virtual ~_ns3__MachineListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__RunTask
#define SOAP_TYPE__ns3__RunTask (64)
/* ns3:RunTask */
class SOAP_CMAC _ns3__RunTask
{
public:
	std::string templateId;	/* required element of type ns2:guid */
	std::string machineId;	/* required element of type ns2:guid */
	std::string *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE__ns3__RunTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RunTask() : name(NULL), soap(NULL) { }
	virtual ~_ns3__RunTask() { }
};
#endif

#ifndef SOAP_TYPE__ns3__RunTaskResponse
#define SOAP_TYPE__ns3__RunTaskResponse (65)
/* ns3:RunTaskResponse */
class SOAP_CMAC _ns3__RunTaskResponse
{
public:
	std::string RunTaskResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE__ns3__RunTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RunTaskResponse() : soap(NULL) { }
	virtual ~_ns3__RunTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsp__union_Policy
#define SOAP_TYPE__wsp__union_Policy (112)
/* xsd:choice */
union _wsp__union_Policy
{
#define SOAP_UNION__wsp__union_Policy_wsp__Policy	(1)
	_wsp__Policy *wsp__Policy;
#define SOAP_UNION__wsp__union_Policy_wsp__All	(2)
	wsp__OperatorContentType *wsp__All;
#define SOAP_UNION__wsp__union_Policy_wsp__ExactlyOne	(3)
	wsp__OperatorContentType *wsp__ExactlyOne;
#define SOAP_UNION__wsp__union_Policy_wsp__PolicyReference	(4)
	_wsp__PolicyReference *wsp__PolicyReference;
#define SOAP_UNION__wsp__union_Policy___any	(5)
	char *__any;
};
#endif

#ifndef SOAP_TYPE___wsp__union_Policy
#define SOAP_TYPE___wsp__union_Policy (111)
/* Operation wrapper: */
class SOAP_CMAC __wsp__union_Policy
{
public:
	int __union_Policy;	/* union discriminant (of union defined below) */
	union _wsp__union_Policy union_Policy;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 111; } /* = unique id SOAP_TYPE___wsp__union_Policy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __wsp__union_Policy() : __union_Policy(0) { }
	virtual ~__wsp__union_Policy() { }
};
#endif

#ifndef SOAP_TYPE__wsp__Policy
#define SOAP_TYPE__wsp__Policy (12)
/* wsp:Policy */
class SOAP_CMAC _wsp__Policy
{
public:
	int __size_Policy;	/* sequence of elements <-union-Policy> */
	__wsp__union_Policy *__union_Policy;
	char *TargetNamespace;	/* optional attribute */
	char *wsu__Id;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__wsp__Policy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsp__Policy() : __size_Policy(0), __union_Policy(NULL), TargetNamespace(NULL), wsu__Id(NULL), __anyAttribute(NULL) { }
	virtual ~_wsp__Policy() { }
};
#endif

#ifndef SOAP_TYPE__wsse__UsernameToken
#define SOAP_TYPE__wsse__UsernameToken (114)
/* wsse:UsernameToken */
struct _wsse__UsernameToken
{
public:
	char *Username;	/* optional element of type xsd:string */
	struct _wsse__Password *Password;	/* optional element of type wsse:Password */
	char *Nonce;	/* optional element of type xsd:string */
	char *wsu__Created;	/* optional element of type xsd:string */
	char *wsu__Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__UsernameToken _wsse__UsernameToken;

#ifndef SOAP_TYPE__wsse__BinarySecurityToken
#define SOAP_TYPE__wsse__BinarySecurityToken (117)
/* Primitive wsse:BinarySecurityToken schema type: */
struct _wsse__BinarySecurityToken
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__BinarySecurityToken _wsse__BinarySecurityToken;

#ifndef SOAP_TYPE__wsse__Reference
#define SOAP_TYPE__wsse__Reference (118)
/* wsse:Reference */
struct _wsse__Reference
{
public:
	char *URI;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Reference _wsse__Reference;

#ifndef SOAP_TYPE__wsse__Embedded
#define SOAP_TYPE__wsse__Embedded (119)
/* wsse:Embedded */
struct _wsse__Embedded
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Embedded _wsse__Embedded;

#ifndef SOAP_TYPE__wsse__KeyIdentifier
#define SOAP_TYPE__wsse__KeyIdentifier (120)
/* Primitive wsse:KeyIdentifier schema type: */
struct _wsse__KeyIdentifier
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__KeyIdentifier _wsse__KeyIdentifier;

#ifndef SOAP_TYPE__wsse__SecurityTokenReference
#define SOAP_TYPE__wsse__SecurityTokenReference (121)
/* wsse:SecurityTokenReference */
struct _wsse__SecurityTokenReference
{
public:
	struct _wsse__Reference *Reference;	/* optional element of type wsse:Reference */
	struct _wsse__KeyIdentifier *KeyIdentifier;	/* optional element of type wsse:KeyIdentifier */
	struct _wsse__Embedded *Embedded;	/* optional element of type wsse:Embedded */
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Usage;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__SecurityTokenReference _wsse__SecurityTokenReference;

#ifndef SOAP_TYPE_ds__SignatureType
#define SOAP_TYPE_ds__SignatureType (125)
/* ds:SignatureType */
struct ds__SignatureType
{
public:
	struct ds__SignedInfoType *SignedInfo;	/* optional element of type ds:SignedInfoType */
	char *SignatureValue;	/* optional element of type xsd:string */
	struct ds__KeyInfoType *KeyInfo;	/* optional element of type ds:KeyInfoType */
	char *Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__SignatureType ds__SignatureType;

#ifndef SOAP_TYPE__c14n__InclusiveNamespaces
#define SOAP_TYPE__c14n__InclusiveNamespaces (134)
/* c14n:InclusiveNamespaces */
struct _c14n__InclusiveNamespaces
{
public:
	char *PrefixList;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _c14n__InclusiveNamespaces _c14n__InclusiveNamespaces;

#ifndef SOAP_TYPE_ds__TransformType
#define SOAP_TYPE_ds__TransformType (135)
/* ds:TransformType */
struct ds__TransformType
{
public:
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
	char *__any;
	char *Algorithm;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__TransformType ds__TransformType;

#ifndef SOAP_TYPE_ds__KeyInfoType
#define SOAP_TYPE_ds__KeyInfoType (128)
/* ds:KeyInfoType */
struct ds__KeyInfoType
{
public:
	char *KeyName;	/* optional element of type xsd:string */
	struct ds__KeyValueType *KeyValue;	/* optional element of type ds:KeyValueType */
	struct ds__RetrievalMethodType *RetrievalMethod;	/* optional element of type ds:RetrievalMethodType */
	struct ds__X509DataType *X509Data;	/* optional element of type ds:X509DataType */
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference;	/* optional element of type wsse:SecurityTokenReference */
	char *Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__KeyInfoType ds__KeyInfoType;

#ifndef SOAP_TYPE_ds__SignedInfoType
#define SOAP_TYPE_ds__SignedInfoType (126)
/* ds:SignedInfoType */
struct ds__SignedInfoType
{
public:
	struct ds__CanonicalizationMethodType *CanonicalizationMethod;	/* required element of type ds:CanonicalizationMethodType */
	struct ds__SignatureMethodType *SignatureMethod;	/* required element of type ds:SignatureMethodType */
	int __sizeReference;	/* sequence of elements <Reference> */
	struct ds__ReferenceType **Reference;	/* required element of type ds:ReferenceType */
	char *Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__SignedInfoType ds__SignedInfoType;

#ifndef SOAP_TYPE_ds__CanonicalizationMethodType
#define SOAP_TYPE_ds__CanonicalizationMethodType (130)
/* ds:CanonicalizationMethodType */
struct ds__CanonicalizationMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
};
#endif
typedef struct ds__CanonicalizationMethodType ds__CanonicalizationMethodType;

#ifndef SOAP_TYPE_ds__SignatureMethodType
#define SOAP_TYPE_ds__SignatureMethodType (131)
/* ds:SignatureMethodType */
struct ds__SignatureMethodType
{
public:
	int *HMACOutputLength;	/* optional element of type xsd:int */
	char *Algorithm;	/* required attribute of type xsd:string */
};
#endif
typedef struct ds__SignatureMethodType ds__SignatureMethodType;

#ifndef SOAP_TYPE_ds__ReferenceType
#define SOAP_TYPE_ds__ReferenceType (132)
/* ds:ReferenceType */
struct ds__ReferenceType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	struct ds__DigestMethodType *DigestMethod;	/* required element of type ds:DigestMethodType */
	char *DigestValue;	/* required element of type xsd:string */
	char *Id;	/* optional attribute of type xsd:string */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__ReferenceType ds__ReferenceType;

#ifndef SOAP_TYPE_ds__TransformsType
#define SOAP_TYPE_ds__TransformsType (133)
/* ds:TransformsType */
struct ds__TransformsType
{
public:
	int __sizeTransform;	/* sequence of elements <Transform> */
	struct ds__TransformType *Transform;	/* required element of type ds:TransformType */
};
#endif
typedef struct ds__TransformsType ds__TransformsType;

#ifndef SOAP_TYPE_ds__DigestMethodType
#define SOAP_TYPE_ds__DigestMethodType (137)
/* ds:DigestMethodType */
struct ds__DigestMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
};
#endif
typedef struct ds__DigestMethodType ds__DigestMethodType;

#ifndef SOAP_TYPE_ds__KeyValueType
#define SOAP_TYPE_ds__KeyValueType (138)
/* ds:KeyValueType */
struct ds__KeyValueType
{
public:
	struct ds__DSAKeyValueType *DSAKeyValue;	/* required element of type ds:DSAKeyValueType */
	struct ds__RSAKeyValueType *RSAKeyValue;	/* required element of type ds:RSAKeyValueType */
};
#endif
typedef struct ds__KeyValueType ds__KeyValueType;

#ifndef SOAP_TYPE_ds__RetrievalMethodType
#define SOAP_TYPE_ds__RetrievalMethodType (140)
/* ds:RetrievalMethodType */
struct ds__RetrievalMethodType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__RetrievalMethodType ds__RetrievalMethodType;

#ifndef SOAP_TYPE_ds__X509DataType
#define SOAP_TYPE_ds__X509DataType (142)
/* ds:X509DataType */
struct ds__X509DataType
{
public:
	struct ds__X509IssuerSerialType *X509IssuerSerial;	/* required element of type ds:X509IssuerSerialType */
	char *X509SKI;	/* required element of type xsd:string */
	char *X509SubjectName;	/* required element of type xsd:string */
	char *X509Certificate;	/* required element of type xsd:string */
	char *X509CRL;	/* required element of type xsd:string */
};
#endif
typedef struct ds__X509DataType ds__X509DataType;

#ifndef SOAP_TYPE_ds__X509IssuerSerialType
#define SOAP_TYPE_ds__X509IssuerSerialType (145)
/* ds:X509IssuerSerialType */
struct ds__X509IssuerSerialType
{
public:
	char *X509IssuerName;	/* required element of type xsd:string */
	int X509SerialNumber;	/* required element of type xsd:int */
};
#endif
typedef struct ds__X509IssuerSerialType ds__X509IssuerSerialType;

#ifndef SOAP_TYPE_ds__DSAKeyValueType
#define SOAP_TYPE_ds__DSAKeyValueType (146)
/* ds:DSAKeyValueType */
struct ds__DSAKeyValueType
{
public:
	char *G;	/* optional element of type xsd:string */
	char *Y;	/* required element of type xsd:string */
	char *J;	/* optional element of type xsd:string */
	char *P;	/* required element of type xsd:string */
	char *Q;	/* required element of type xsd:string */
	char *Seed;	/* required element of type xsd:string */
	char *PgenCounter;	/* required element of type xsd:string */
};
#endif
typedef struct ds__DSAKeyValueType ds__DSAKeyValueType;

#ifndef SOAP_TYPE_ds__RSAKeyValueType
#define SOAP_TYPE_ds__RSAKeyValueType (147)
/* ds:RSAKeyValueType */
struct ds__RSAKeyValueType
{
public:
	char *Modulus;	/* required element of type xsd:string */
	char *Exponent;	/* required element of type xsd:string */
};
#endif
typedef struct ds__RSAKeyValueType ds__RSAKeyValueType;

#ifndef SOAP_TYPE__wsse__Security
#define SOAP_TYPE__wsse__Security (159)
/* wsse:Security */
struct _wsse__Security
{
public:
	struct _wsu__Timestamp *wsu__Timestamp;	/* optional element of type wsu:Timestamp */
	struct _wsse__UsernameToken *UsernameToken;	/* optional element of type wsse:UsernameToken */
	struct _wsse__BinarySecurityToken *BinarySecurityToken;	/* optional element of type wsse:BinarySecurityToken */
	struct ds__SignatureType *ds__Signature;	/* optional element of type ds:SignatureType */
	char *SOAP_ENV__actor;	/* optional attribute of type xsd:string */
	char *SOAP_ENV__role;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Security _wsse__Security;

#ifndef SOAP_TYPE__wsse__Password
#define SOAP_TYPE__wsse__Password (115)
/* Primitive wsse:Password schema type: */
struct _wsse__Password
{
public:
	char *__item;
	char *Type;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Password _wsse__Password;

#ifndef SOAP_TYPE___ns4__Authenticate
#define SOAP_TYPE___ns4__Authenticate (170)
/* Operation wrapper: */
struct __ns4__Authenticate
{
public:
	_ns1__Authenticate *ns1__Authenticate;	/* optional element of type ns1:Authenticate */
};
#endif

#ifndef SOAP_TYPE___ns4__TerminateJob
#define SOAP_TYPE___ns4__TerminateJob (174)
/* Operation wrapper: */
struct __ns4__TerminateJob
{
public:
	_ns1__TerminateJob *ns1__TerminateJob;	/* optional element of type ns1:TerminateJob */
};
#endif

#ifndef SOAP_TYPE___ns4__GetMachineList
#define SOAP_TYPE___ns4__GetMachineList (178)
/* Operation wrapper: */
struct __ns4__GetMachineList
{
public:
	_ns1__GetMachineList *ns1__GetMachineList;	/* optional element of type ns1:GetMachineList */
};
#endif

#ifndef SOAP_TYPE___ns4__GetJobList
#define SOAP_TYPE___ns4__GetJobList (182)
/* Operation wrapper: */
struct __ns4__GetJobList
{
public:
	_ns1__GetJobList *ns1__GetJobList;	/* optional element of type ns1:GetJobList */
};
#endif

#ifndef SOAP_TYPE___ns4__GetJobStatus
#define SOAP_TYPE___ns4__GetJobStatus (186)
/* Operation wrapper: */
struct __ns4__GetJobStatus
{
public:
	_ns1__GetJobStatus *ns1__GetJobStatus;	/* optional element of type ns1:GetJobStatus */
};
#endif

#ifndef SOAP_TYPE___ns4__GetWorkflowList
#define SOAP_TYPE___ns4__GetWorkflowList (190)
/* Operation wrapper: */
struct __ns4__GetWorkflowList
{
public:
	_ns1__GetWorkflowList *ns1__GetWorkflowList;	/* optional element of type ns1:GetWorkflowList */
};
#endif

#ifndef SOAP_TYPE___ns4__RunWorkflow
#define SOAP_TYPE___ns4__RunWorkflow (194)
/* Operation wrapper: */
struct __ns4__RunWorkflow
{
public:
	_ns1__RunWorkflow *ns1__RunWorkflow;	/* optional element of type ns1:RunWorkflow */
};
#endif

#ifndef SOAP_TYPE___ns4__GetWorkflowOuputList
#define SOAP_TYPE___ns4__GetWorkflowOuputList (198)
/* Operation wrapper: */
struct __ns4__GetWorkflowOuputList
{
public:
	_ns1__GetWorkflowOuputList *ns1__GetWorkflowOuputList;	/* optional element of type ns1:GetWorkflowOuputList */
};
#endif

#ifndef SOAP_TYPE___ns4__GetDataProductList
#define SOAP_TYPE___ns4__GetDataProductList (202)
/* Operation wrapper: */
struct __ns4__GetDataProductList
{
public:
	_ns1__GetDataProductList *ns1__GetDataProductList;	/* optional element of type ns1:GetDataProductList */
};
#endif

#ifndef SOAP_TYPE___ns4__GetDataProduct
#define SOAP_TYPE___ns4__GetDataProduct (206)
/* Operation wrapper: */
struct __ns4__GetDataProduct
{
public:
	_ns1__GetDataProduct *ns1__GetDataProduct;	/* optional element of type ns1:GetDataProduct */
};
#endif

#ifndef SOAP_TYPE___ns5__Authenticate
#define SOAP_TYPE___ns5__Authenticate (208)
/* Operation wrapper: */
struct __ns5__Authenticate
{
public:
	_ns1__Authenticate *ns1__Authenticate;	/* optional element of type ns1:Authenticate */
};
#endif

#ifndef SOAP_TYPE___ns5__TerminateJob
#define SOAP_TYPE___ns5__TerminateJob (210)
/* Operation wrapper: */
struct __ns5__TerminateJob
{
public:
	_ns1__TerminateJob *ns1__TerminateJob;	/* optional element of type ns1:TerminateJob */
};
#endif

#ifndef SOAP_TYPE___ns5__GetMachineList
#define SOAP_TYPE___ns5__GetMachineList (212)
/* Operation wrapper: */
struct __ns5__GetMachineList
{
public:
	_ns1__GetMachineList *ns1__GetMachineList;	/* optional element of type ns1:GetMachineList */
};
#endif

#ifndef SOAP_TYPE___ns5__GetJobList
#define SOAP_TYPE___ns5__GetJobList (214)
/* Operation wrapper: */
struct __ns5__GetJobList
{
public:
	_ns1__GetJobList *ns1__GetJobList;	/* optional element of type ns1:GetJobList */
};
#endif

#ifndef SOAP_TYPE___ns5__GetJobStatus
#define SOAP_TYPE___ns5__GetJobStatus (216)
/* Operation wrapper: */
struct __ns5__GetJobStatus
{
public:
	_ns1__GetJobStatus *ns1__GetJobStatus;	/* optional element of type ns1:GetJobStatus */
};
#endif

#ifndef SOAP_TYPE___ns5__GetWorkflowList
#define SOAP_TYPE___ns5__GetWorkflowList (218)
/* Operation wrapper: */
struct __ns5__GetWorkflowList
{
public:
	_ns1__GetWorkflowList *ns1__GetWorkflowList;	/* optional element of type ns1:GetWorkflowList */
};
#endif

#ifndef SOAP_TYPE___ns5__RunWorkflow
#define SOAP_TYPE___ns5__RunWorkflow (220)
/* Operation wrapper: */
struct __ns5__RunWorkflow
{
public:
	_ns1__RunWorkflow *ns1__RunWorkflow;	/* optional element of type ns1:RunWorkflow */
};
#endif

#ifndef SOAP_TYPE___ns5__GetWorkflowOuputList
#define SOAP_TYPE___ns5__GetWorkflowOuputList (222)
/* Operation wrapper: */
struct __ns5__GetWorkflowOuputList
{
public:
	_ns1__GetWorkflowOuputList *ns1__GetWorkflowOuputList;	/* optional element of type ns1:GetWorkflowOuputList */
};
#endif

#ifndef SOAP_TYPE___ns5__GetDataProductList
#define SOAP_TYPE___ns5__GetDataProductList (224)
/* Operation wrapper: */
struct __ns5__GetDataProductList
{
public:
	_ns1__GetDataProductList *ns1__GetDataProductList;	/* optional element of type ns1:GetDataProductList */
};
#endif

#ifndef SOAP_TYPE___ns5__GetDataProduct
#define SOAP_TYPE___ns5__GetDataProduct (226)
/* Operation wrapper: */
struct __ns5__GetDataProduct
{
public:
	_ns1__GetDataProduct *ns1__GetDataProduct;	/* optional element of type ns1:GetDataProduct */
};
#endif

#ifndef SOAP_TYPE___ns6__Ping
#define SOAP_TYPE___ns6__Ping (230)
/* Operation wrapper: */
struct __ns6__Ping
{
public:
	_ns3__Ping *ns3__Ping;	/* optional element of type ns3:Ping */
};
#endif

#ifndef SOAP_TYPE___ns6__TaskList
#define SOAP_TYPE___ns6__TaskList (234)
/* Operation wrapper: */
struct __ns6__TaskList
{
public:
	_ns3__TaskList *ns3__TaskList;	/* optional element of type ns3:TaskList */
};
#endif

#ifndef SOAP_TYPE___ns6__TaskInfo
#define SOAP_TYPE___ns6__TaskInfo (238)
/* Operation wrapper: */
struct __ns6__TaskInfo
{
public:
	_ns3__TaskInfo *ns3__TaskInfo_;	/* optional element of type ns3:TaskInfo */
};
#endif

#ifndef SOAP_TYPE___ns6__ResultTask
#define SOAP_TYPE___ns6__ResultTask (242)
/* Operation wrapper: */
struct __ns6__ResultTask
{
public:
	_ns3__ResultTask *ns3__ResultTask;	/* optional element of type ns3:ResultTask */
};
#endif

#ifndef SOAP_TYPE___ns6__ComputationTypeList
#define SOAP_TYPE___ns6__ComputationTypeList (246)
/* Operation wrapper: */
struct __ns6__ComputationTypeList
{
public:
	_ns3__ComputationTypeList *ns3__ComputationTypeList;	/* optional element of type ns3:ComputationTypeList */
};
#endif

#ifndef SOAP_TYPE___ns6__MachineList
#define SOAP_TYPE___ns6__MachineList (250)
/* Operation wrapper: */
struct __ns6__MachineList
{
public:
	_ns3__MachineList *ns3__MachineList;	/* optional element of type ns3:MachineList */
};
#endif

#ifndef SOAP_TYPE___ns6__RunTask
#define SOAP_TYPE___ns6__RunTask (254)
/* Operation wrapper: */
struct __ns6__RunTask
{
public:
	_ns3__RunTask *ns3__RunTask;	/* optional element of type ns3:RunTask */
};
#endif

#ifndef SOAP_TYPE___ns7__Ping
#define SOAP_TYPE___ns7__Ping (256)
/* Operation wrapper: */
struct __ns7__Ping
{
public:
	_ns3__Ping *ns3__Ping;	/* optional element of type ns3:Ping */
};
#endif

#ifndef SOAP_TYPE___ns7__TaskList
#define SOAP_TYPE___ns7__TaskList (258)
/* Operation wrapper: */
struct __ns7__TaskList
{
public:
	_ns3__TaskList *ns3__TaskList;	/* optional element of type ns3:TaskList */
};
#endif

#ifndef SOAP_TYPE___ns7__TaskInfo
#define SOAP_TYPE___ns7__TaskInfo (260)
/* Operation wrapper: */
struct __ns7__TaskInfo
{
public:
	_ns3__TaskInfo *ns3__TaskInfo_;	/* optional element of type ns3:TaskInfo */
};
#endif

#ifndef SOAP_TYPE___ns7__ResultTask
#define SOAP_TYPE___ns7__ResultTask (262)
/* Operation wrapper: */
struct __ns7__ResultTask
{
public:
	_ns3__ResultTask *ns3__ResultTask;	/* optional element of type ns3:ResultTask */
};
#endif

#ifndef SOAP_TYPE___ns7__ComputationTypeList
#define SOAP_TYPE___ns7__ComputationTypeList (264)
/* Operation wrapper: */
struct __ns7__ComputationTypeList
{
public:
	_ns3__ComputationTypeList *ns3__ComputationTypeList;	/* optional element of type ns3:ComputationTypeList */
};
#endif

#ifndef SOAP_TYPE___ns7__MachineList
#define SOAP_TYPE___ns7__MachineList (266)
/* Operation wrapper: */
struct __ns7__MachineList
{
public:
	_ns3__MachineList *ns3__MachineList;	/* optional element of type ns3:MachineList */
};
#endif

#ifndef SOAP_TYPE___ns7__RunTask
#define SOAP_TYPE___ns7__RunTask (268)
/* Operation wrapper: */
struct __ns7__RunTask
{
public:
	_ns3__RunTask *ns3__RunTask;	/* optional element of type ns3:RunTask */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (269)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (270)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (272)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (275)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (276)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__wsp__PolicyURIs
#define SOAP_TYPE__wsp__PolicyURIs (67)
typedef std::string _wsp__PolicyURIs;
#endif

#ifndef SOAP_TYPE_ns2__guid
#define SOAP_TYPE_ns2__guid (70)
typedef std::string ns2__guid;
#endif

#ifndef SOAP_TYPE__wsp__All
#define SOAP_TYPE__wsp__All (164)
typedef wsp__OperatorContentType _wsp__All;
#endif

#ifndef SOAP_TYPE__wsp__ExactlyOne
#define SOAP_TYPE__wsp__ExactlyOne (165)
typedef wsp__OperatorContentType _wsp__ExactlyOne;
#endif

#ifndef SOAP_TYPE__wsp__Optional
#define SOAP_TYPE__wsp__Optional (166)
typedef enum xsd__boolean_ _wsp__Optional;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__Authenticate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Authenticate *ns1__Authenticate, _ns1__AuthenticateResponse *ns1__AuthenticateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__TerminateJob(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__TerminateJob *ns1__TerminateJob, _ns1__TerminateJobResponse *ns1__TerminateJobResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__GetMachineList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMachineList *ns1__GetMachineList, _ns1__GetMachineListResponse *ns1__GetMachineListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__GetJobList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetJobList *ns1__GetJobList, _ns1__GetJobListResponse *ns1__GetJobListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__GetJobStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetJobStatus *ns1__GetJobStatus, _ns1__GetJobStatusResponse *ns1__GetJobStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__GetWorkflowList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetWorkflowList *ns1__GetWorkflowList, _ns1__GetWorkflowListResponse *ns1__GetWorkflowListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__RunWorkflow(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RunWorkflow *ns1__RunWorkflow, _ns1__RunWorkflowResponse *ns1__RunWorkflowResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__GetWorkflowOuputList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetWorkflowOuputList *ns1__GetWorkflowOuputList, _ns1__GetWorkflowOuputListResponse *ns1__GetWorkflowOuputListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__GetDataProductList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDataProductList *ns1__GetDataProductList, _ns1__GetDataProductListResponse *ns1__GetDataProductListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns4__GetDataProduct(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDataProduct *ns1__GetDataProduct, _ns1__GetDataProductResponse *ns1__GetDataProductResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__Authenticate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Authenticate *ns1__Authenticate, _ns1__AuthenticateResponse *ns1__AuthenticateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__TerminateJob(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__TerminateJob *ns1__TerminateJob, _ns1__TerminateJobResponse *ns1__TerminateJobResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__GetMachineList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMachineList *ns1__GetMachineList, _ns1__GetMachineListResponse *ns1__GetMachineListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__GetJobList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetJobList *ns1__GetJobList, _ns1__GetJobListResponse *ns1__GetJobListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__GetJobStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetJobStatus *ns1__GetJobStatus, _ns1__GetJobStatusResponse *ns1__GetJobStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__GetWorkflowList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetWorkflowList *ns1__GetWorkflowList, _ns1__GetWorkflowListResponse *ns1__GetWorkflowListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__RunWorkflow(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__RunWorkflow *ns1__RunWorkflow, _ns1__RunWorkflowResponse *ns1__RunWorkflowResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__GetWorkflowOuputList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetWorkflowOuputList *ns1__GetWorkflowOuputList, _ns1__GetWorkflowOuputListResponse *ns1__GetWorkflowOuputListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__GetDataProductList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDataProductList *ns1__GetDataProductList, _ns1__GetDataProductListResponse *ns1__GetDataProductListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns5__GetDataProduct(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetDataProduct *ns1__GetDataProduct, _ns1__GetDataProductResponse *ns1__GetDataProductResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns6__Ping(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__Ping *ns3__Ping, _ns3__PingResponse *ns3__PingResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns6__TaskList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__TaskList *ns3__TaskList, _ns3__TaskListResponse *ns3__TaskListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns6__TaskInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__TaskInfo *ns3__TaskInfo_, _ns3__TaskInfoResponse *ns3__TaskInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns6__ResultTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__ResultTask *ns3__ResultTask, _ns3__ResultTaskResponse *ns3__ResultTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns6__ComputationTypeList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__ComputationTypeList *ns3__ComputationTypeList, _ns3__ComputationTypeListResponse *ns3__ComputationTypeListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns6__MachineList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__MachineList *ns3__MachineList, _ns3__MachineListResponse *ns3__MachineListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns6__RunTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RunTask *ns3__RunTask, _ns3__RunTaskResponse *ns3__RunTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns7__Ping(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__Ping *ns3__Ping, _ns3__PingResponse *ns3__PingResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns7__TaskList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__TaskList *ns3__TaskList, _ns3__TaskListResponse *ns3__TaskListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns7__TaskInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__TaskInfo *ns3__TaskInfo_, _ns3__TaskInfoResponse *ns3__TaskInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns7__ResultTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__ResultTask *ns3__ResultTask, _ns3__ResultTaskResponse *ns3__ResultTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns7__ComputationTypeList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__ComputationTypeList *ns3__ComputationTypeList, _ns3__ComputationTypeListResponse *ns3__ComputationTypeListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns7__MachineList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__MachineList *ns3__MachineList, _ns3__MachineListResponse *ns3__MachineListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns7__RunTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RunTask *ns3__RunTask, _ns3__RunTaskResponse *ns3__RunTaskResponse);

#endif

/* End of soapStub.h */
